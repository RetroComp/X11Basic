' Pseudo-Kompiler fuer X11-Basic (console-Version)
' erzeugt allein lauffaehigen Code auf Wunsch auch statisch mit der
' X11-Basic-Library gelinkt
' (c) Markus Hoffmann Dec. 2002 (letzte Bearbeitung: 10.08.2011)
' 10.2004: Produziert nun auch Object-Files ohne main()
' 10.2005: Produziert nun auch WINDOWS .exe files
' 04.2007: now can produce .b bytecode files
' 04.2011: now can produce real compiled files

'* This file is part of X11BASIC, the basic interpreter for Unix/X
'* ======================================================================
'* X11BASIC is free software and comes with NO WARRANTY - read the file
'* COPYING for details
'*



i=1
compileonly=FALSE
precomponly=FALSE
lflag=FALSE
win32=FALSE
bytecode=FALSE
virtualm=FALSE
CLR inputfile$,dyn,collect$
outputfilename$="b.out"
WHILE LEN(param$(i))
  IF LEFT$(param$(i))="-"
    IF param$(i)="--help" OR param$(i)="-h"
      @intro
      @using
    ELSE IF param$(i)="--version"
      @intro
      QUIT
    ELSE IF param$(i)="--dynamic"
      dyn=TRUE
    ELSE IF param$(i)="-win32"
      win32=TRUE
      if outputfilename$="b.out"
        outputfilename$="b.exe"
      endif
    ELSE IF param$(i)="-bytecode"
      bytecode=true
    ELSE IF param$(i)="-virtualm"
      virtualm=true
    ELSE IF param$(i)="-b"
      precomponly=TRUE
      compileonly=TRUE
    ELSE IF param$(i)="-c"
      compileonly=TRUE
    ELSE IF param$(i)="-l"
      lflag=TRUE
    ELSE IF param$(i)="-o"
      INC i
      IF LEN(param$(i))
        outputfilename$=param$(i)
      ENDIF
    else 
      collect$=collect$+param$(i)+" " 
    ENDIF
  ELSE
    inputfile$=param$(i)
    IF NOT EXIST(inputfile$)
      PRINT "xbc: "+inputfile$+": file or path not found"
      CLR inputfile$
    ENDIF
  ENDIF
  INC i
WEND
IF LEN(inputfile$)
  rumpf$=inputfile$
  while len(rumpf$)
    wort_sep rumpf$,"/",1,a$,rumpf$
  wend
  f$=a$
  rumpf$=a$
  wort_sep a$,".",1,rumpf$,typ$
  if typ$="o"
    @link
  else if typ$="b"
    @compilevm
    if not compileonly
      @link
    ENDIF
  ELSE IF typ$="bas"
    IF virtualm OR bytecode
      @dobytecode
    ENDIF  
    IF virtualm
      @compilevm
    ELSE
      @compile
    ENDIF
    IF NOT compileonly
      @link
    ENDIF
  ELSE 
    PRINT f$+": file not recognized: File format not recognized"
  ENDIF
ELSE
  PRINT "xbc: No input files"
ENDIF
QUIT
PROCEDURE intro
  PRINT "X11-Basic Compiler V.@version@ (c) Markus Hoffmann 2002-2011"
  VERSION
RETURN
PROCEDURE using
  PRINT "Usage: xbc [options] file..."
  PRINT "Options:"
  PRINT "  -h, --help               Display this information"
  PRINT "  --dynamic                link with shared library libx11basic.so"
  PRINT "  --static                 link with static library (default)"
  PRINT "  -b                       only precompile"
  PRINT "  -c                       precompile and compile, but do not link"
  PRINT "  -l                       produce linkable object file (no executable)"
  PRINT "  -bytecode                produce a bytecode file"
  PRINT "  -virtualm                use virtual machine framework instead of psydo-interpreter"
  PRINT "  -shared                  produce shared object file"
  PRINT "  -win32                   produce Windows .exe file"
  PRINT "  -o <file>                Place the output into <file>"
RETURN
PROCEDURE dobytecode
  SYSTEM "xbbc -o "+rumpf$+".b"+" "+inputfile$
RETURN
PROCEDURE compilevm
  system "xbbc -o "+rumpf$+".b"+" "+inputfile$
  if lflag
    system "xb2c -l -o "+rumpf$+".c"+" "+rumpf$+".b"
  else
    system "xb2c -o "+rumpf$+".c"+" "+rumpf$+".b"
  endif
  IF NOT precomponly
    if win32
      system "i686-pc-mingw32-gcc @copt@ -c "+rumpf$+".c"
    else
      if lflag
        system "@CC@ @copt@ -DNOMAIN -c "+rumpf$+".c"
      else
        system "@CC@ @copt@ -c "+rumpf$+".c"
      endif
    endif
    system "rm -f "+rumpf$+".c "+rumpf$+".b"
  ENDIF
RETURN

PROCEDURE compile
  OPEN "O",#2,rumpf$+".c"
  PRINT #2,"/* PSEUDO-Code.c ("+f$+")"
  PRINT #2,"   X11-BAsic-Pseudo-Compiler Version @version@"
  PRINT #2,"   (c) Markus Hoffmann"
  PRINT #2,"*/"
  PRINT #2,"#include <stdio.h>"
  PRINT #2,"#include <stdlib.h>"
  PRINT #2,"#include <string.h>"
  PRINT #2,"extern int param_anzahl;"
  PRINT #2,"extern char **param_argumente;"
  IF lflag
    PRINT #2,"void programmlauf();"
    PRINT #2,"extern char **program;"
    PRINT #2,"extern int prglen;"
    PRINT #2,"char *routine_"+rumpf$+"[]={"
  ELSE
    PRINT #2,"void reset_input_mode(),x11basicStartup(),programmlauf();"
    PRINT #2,"const char version[]="+chr$(34)+"@version@"+chr$(34)+";"
    PRINT #2,"const char vdate[]="+chr$(34)+date$+" "+time$+" xxxx @version@"+chr$(34)+";"
    PRINT #2,"int verbose=0;"
    PRINT #2,"int programbufferlen=0;"
    PRINT #2,"char ifilename[]="+chr$(34)+f$+chr$(34)+";"
    PRINT #2,"char *programbuffer=NULL;"
    PRINT #2,"char *program[]={"
  ENDIF
  OPEN "I",#1,inputfile$
  WHILE NOT EOF(#1)
    LINEINPUT #1,t$
    t$=XTRIM$(t$)
    IF LEN(t$)
      IF LEFT$(t$)<>"'"
        WORT_SEP t$," !",1,t$,b$
        IF LEFT$(t$,6)="PRINT "
          t$="? "+right$(t$,len(t$)-6)
        ELSE IF LEFT$(t$,6)="GOSUB "
          t$="@"+right$(t$,len(t$)-6)
        ELSE IF LEFT$(t$,5)="VOID "
          t$="~"+right$(t$,len(t$)-5)
        ENDIF
        t$=REPLACE$(t$,chr$(34),"##AN"+"F##")
        t$=REPLACE$(t$,"\","##BACKS"+"LASH##")
        t$=REPLACE$(t$,"##A"+"NF##","\042")
        t$=REPLACE$(t$,"##BACK"+"SLASH##","\\")
        PRINT #2,chr$(34)+t$+chr$(34)+","
      ENDIF
    ENDIF
  WEND
  CLOSE #1
  PRINT #2,"};"
  IF lflag
    PRINT #2,"int routinelen_"+rumpf$+"=sizeof(routine_"+rumpf$+")/sizeof(char *);"
    PRINT #2,"typedef struct {int len; char *pointer;} STRING;"
    PRINT #2,"extern union {double f; STRING str;} returnvalue;"
    PRINT #2,"double enter_"+rumpf$+"(char *n){"
    PRINT #2,"int oldprglen; char **oldprogram;"
    PRINT #2,"oldprglen=prglen; oldprogram=program;"
    PRINT #2,"program=routine_"+rumpf$+";"
    PRINT #2,"prglen=routinelen_"+rumpf$+";"
    PRINT #2,"init_program();c_run("");c_gosub(n);programmlauf();"
    PRINT #2,"program=oldprogram;prglen=oldprglen;"
    PRINT #2,"return(returnvalue.f);}"
  ELSE 
    PRINT #2,"int prglen=sizeof(program)/sizeof(char *);"
    IF win32
      PRINT #2,"#include <windows.h>"
      print #2,"HINSTANCE hInstance;"
    ENDIF
    PRINT #2,"main(int anzahl, char *argumente[]){"
    IF win32
      PRINT #2,"hInstance=GetModuleHandle(NULL);"
    ENDIF
    PRINT #2,"x11basicStartup(); set_input_mode(1,0);" 
    PRINT #2,"atexit(reset_input_mode);"
    PRINT #2,"param_anzahl=anzahl;"
    PRINT #2,"param_argumente=argumente;"
    PRINT #2,"init_program(); do_run(); programmlauf();}"
  ENDIF
  CLOSE #2
  IF NOT precomponly
    IF win32
      SYSTEM "i686-pc-mingw32-gcc @copt@ -c "+rumpf$+".c"
    ELSE
      SYSTEM "@CC@ @copt@ -c "+rumpf$+".c"
    ENDIF
    SYSTEM "rm -f "+rumpf$+".c"
  ENDIF
RETURN

PROCEDURE link
  IF dyn
    IF win32
      SYSTEM "i686-pc-mingw32-gcc @regs@ -o "+outputfilename$+" "+rumpf$+".o -L/usr/lib/ -lx11basic -lm -lgdi32 -lkernel32 -luser32 -lole32 -luuid -lwsock32"
    ELSE
      SYSTEM "@CC@ @regs@ -o "+outputfilename$+" "+rumpf$+".o @X_LIBS@ -lx11basic  @libs@"
    ENDIF
  ELSE
    IF win32
      SYSTEM "i686-pc-mingw32-gcc @regs@ -o "+outputfilename$+" "+rumpf$+".o /usr/lib/x11basic.lib -lm  -lgdi32 -lkernel32 -luser32 -lole32 -luuid -lwsock32 "
    ELSE
      SYSTEM "@CC@ @regs@ -o "+outputfilename$+" "+rumpf$+".o /usr/lib/x11basic.a @X_LIBS@ @libs@"
    ENDIF
  ENDIF
RETURN
